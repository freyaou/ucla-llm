{
  "name": "Hw2",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "You are an event-planning assistant that helps generate Google Forms for collecting RSVPs.\n\nThe user will provide a short natural-language event description (for example, “Networking mixer for 12–18 MSBA students in Westwood this Friday”).\nYour task is to convert this input into a structured RSVP form definition.\n\nAlways output a single, valid JSON object — no extra words, explanations, or formatting outside the JSON.\n\nOutput structure:\n{\n  \"title\": \"string\",\n  \"description\": \"string\",\n  \"questions\": [\n    {\n      \"type\": \"shortAnswer\" | \"multipleChoice\" | \"checkbox\" | \"paragraph\" | \"date\" | \"time\",\n      \"title\": \"string\",\n      \"helpText\": \"string (optional)\",\n      \"options\": [\"option1\", \"option2\", ...]  // only for multipleChoice or checkbox\n    }\n  ]\n}\n\nGuidelines:\n- Use the user's event description to infer title, description, and relevant options.\n- Always include these 5–7 RSVP questions:\n  1) shortAnswer — \"Full Name\"\n  2) shortAnswer — \"Email\"\n  3) multipleChoice — \"Can you attend?\" with [\"Yes\",\"No\"]\n  4) shortAnswer — \"Preferred location\"\n  5) multipleChoice — \"Preferred time slot\" (derive 2–4 from description)\n  6) checkbox — \"Activity preference\" (infer or use [\"Networking\",\"Games\",\"Food\",\"Drinks\"])\n  7) paragraph — \"Dietary notes or comments\" (optional)\n- Keep tone friendly and professional.\n- Never include explanations like “Here’s your form”; output pure JSON.\n\nExample input:\n\"Networking mixer for 12–18 MSBA students in Westwood this Friday.\"\n\nExample output:\n{\n  \"title\": \"RSVP — MSBA Westwood Mixer\",\n  \"description\": \"RSVP for a networking mixer for MSBA students in Westwood this Friday.\",\n  \"questions\": [\n    {\"type\":\"shortAnswer\", \"title\":\"Full Name\"},\n    {\"type\":\"shortAnswer\", \"title\":\"Email\"},\n    {\"type\":\"multipleChoice\", \"title\":\"Can you attend?\", \"options\":[\"Yes\",\"No\"]},\n    {\"type\":\"shortAnswer\", \"title\":\"Preferred location\"},\n    {\"type\":\"multipleChoice\", \"title\":\"Preferred time slot\", \"options\":[\"Friday 6–8 PM\",\"Saturday 5–7 PM\",\"Sunday 3–5 PM\"]},\n    {\"type\":\"checkbox\", \"title\":\"Activity preference\", \"options\":[\"Networking\",\"Games\",\"Food\",\"Drinks\"]},\n    {\"type\":\"paragraph\", \"title\":\"Dietary notes or comments\"}\n  ]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1104,
        -32
      ],
      "id": "cf7104ba-0501-436f-ada5-bbb113aef45d",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1008,
        192
      ],
      "id": "f8378c5d-0141-4d2d-ac61-c191cfce6b04",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "model": "openai/o4-mini-high",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -1104,
        176
      ],
      "id": "89394745-6a03-42e2-9a3c-f85499bd553d",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "jPN6HIDuzt2yQ4fW",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -1328,
        -32
      ],
      "id": "51fd92ff-7773-4973-8ae4-4ca7da00cf80",
      "name": "When chat message received",
      "webhookId": "e0970f16-2ab0-4830-afd1-280d3e88058f"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://script.google.com/macros/s/AKfycbxTq60nsRrnMO_Pl417I53mlBZW1BFYZ6P9VNIfBt5c1ZY0PGQEuxCBWqNNxGpDaEOG/exec",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -544,
        -32
      ],
      "id": "34cf2137-73ae-482c-8b73-6da5cfe373e1",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Collect likely fields where the model might put the JSON\nconst candidates = [\n  $json.schema,\n  $json.output,               // <-- your case\n  $json.kwargs?.content,\n  $json.content,\n  $json.text,\n  $json.message,\n  $json.response,\n];\n\n// Pick the first non-null/undefined candidate\nlet raw = candidates.find(v => v !== undefined && v !== null) ?? '';\n\nfunction safeParse(input) {\n  if (input && typeof input === 'object') return input; // already an object\n  const s = String(input);\n  // If the model wrapped the JSON with any extra text, extract the first {...} block\n  const start = s.indexOf('{');\n  const end   = s.lastIndexOf('}');\n  const core  = (start >= 0 && end >= start) ? s.slice(start, end + 1) : s;\n\n  try {\n    return JSON.parse(core);\n  } catch {\n    // Fallback schema (so Apps Script still creates a form)\n    return {\n      title: \"Untitled Event\",\n      description: \"Auto-generated placeholder (invalid JSON).\",\n      questions: [\n        { type: \"shortAnswer\",    title: \"Full Name\" },\n        { type: \"multipleChoice\", title: \"Can you attend?\", options: [\"Yes\",\"No\"] },\n        { type: \"paragraph\",      title: \"Dietary restrictions or comments\" }\n      ]\n    };\n  }\n}\n\n// n8n expects an array of items\nreturn [{ json: safeParse(raw) }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -752,
        -32
      ],
      "id": "a7ee7f5c-a8b1-4aff-a3e2-4d54e6485f6e",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "toRecipients": "emyoh001@g.ucla.edu\n",
        "subject": "=Event RSVP: {{$json.eventTitle || 'Our Event'}}",
        "bodyContent": "={{`<p>Hi team,</p>\n<p>Please RSVP for <b>${$json.eventTitle || 'Our Event'}</b> using this link:</p>\n<p><a href=\"${$node['HTTP Request'].json.responderUrl}\">RSVP Form</a></p>\n<p>Thanks!</p>`}}\n",
        "additionalFields": {
          "bodyContentType": "html"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        -352,
        -32
      ],
      "id": "3d366396-3280-4bea-8725-8cfe0ea58e1e",
      "name": "Send a message",
      "webhookId": "a954e567-f734-42c6-be49-0d2222d96edc",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "e6Nvw1Cy3xGBIZ1g",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "={{ $node[\"HTTP Request\"].json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $node[\"HTTP Request\"].json.sheetName }}",
          "mode": "name"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        272,
        -128
      ],
      "id": "59798401-7f52-418b-af0f-17bd1027a2aa",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "49IV4IPDumI81TWG",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "message": "RSVP invites are sent. When the deadline has passed, do you want me to analyze the responses now?\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        -144,
        -32
      ],
      "id": "cb6c8db1-1972-414a-9763-204b5ea90623",
      "name": "Respond to Chat"
    },
    {
      "parameters": {
        "message": "No problem — I’ll wait until the RSVP deadline. Just say \"analyze\" when ready.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        288,
        96
      ],
      "id": "fce98763-39ea-4e94-8810-9d58ef522d7a",
      "name": "Respond to Chat1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f935e907-6bd1-4421-977d-aba07a07aa9d",
              "leftValue": "={{ String($json.chatInput ?? $json.message ?? $json.text ?? $json.query ?? '')\n   .trim()\n   .toLowerCase() }}\n",
              "rightValue": "^(analyze|yes|y|sure|go ahead)",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        80,
        -32
      ],
      "id": "59b2e225-3239-4e13-939d-42d5a9fa3193",
      "name": "If"
    },
    {
      "parameters": {
        "message": "={{ $json.message }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        1072,
        -128
      ],
      "id": "7ab2c3e8-a125-484f-aaef-34ddd78e5f42",
      "name": "Respond to Chat2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f935e907-6bd1-4421-977d-aba07a07aa9d",
              "leftValue": "={{ String($json.chatInput ?? $json.message ?? $json.text ?? $json.query ?? '')\n   .trim()\n   .toLowerCase() }}\n",
              "rightValue": "^(send|yes|y|sure|ye|go ahead)",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1296,
        -128
      ],
      "id": "bd500488-5ee3-4039-9501-a5d3e75f38ab",
      "name": "If1"
    },
    {
      "parameters": {
        "message": "No problem — I’ll wait until the RSVP deadline. Just say \"analyze\" when ready.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        1648,
        0
      ],
      "id": "f584345a-e540-4250-86f9-6d419cdc01f3",
      "name": "Respond to Chat3"
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "create",
        "calendarId": {
          "__rl": true,
          "value": "AQMkADAwATM3ZmYAZS1kNDcxLWY4NGQtMDACLTAwCgBGAAADT47FJk2bH0a6_byVN6iJ9wcAPTS8me3fDESNoiv67PfOPQAAAgEGAAAAPTS8me3fDESNoiv67PfOPQAAAjBLAAAA",
          "mode": "list",
          "cachedResultName": "Calendar"
        },
        "subject": "={{ $('Tally').item.json.eventTitle }}",
        "startDateTime": "={{ $json.start }}",
        "endDateTime": "={{ $json.end }}",
        "additionalFields": {
          "body": "={{ $('Tally').item.json.winners.venue }}"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        1680,
        -256
      ],
      "id": "749d3596-c2c1-4b16-9a23-5473de55ea13",
      "name": "Create an event",
      "webhookId": "61222e0a-fc37-408c-a67d-c6cfc871457c",
      "alwaysOutputData": false,
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "e6Nvw1Cy3xGBIZ1g",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Make a clean payload the LLM can consume\nconst rows = items.map(i => i.json);\n\n// Define the metadata that will be added to each row\nconst eventTitle = \"MSBA Mixer\";\nconst seed = Date.now() % 1000; // deterministic tie-breaker\nconst columnHints = {\n  attendance: ['Can you attend?', 'RSVP', 'Attending'],\n  venue: ['Preferred location', 'Venue', 'Location', 'Where'],\n  date: ['Preferred time slot', 'Date', 'When']\n};\n\n// Use .map() to create a new array. For each row, copy its original\n// data and add the metadata to it.\nconst enrichedRows = rows.map(row => {\n  return {\n    ...row, // Copies the original row data (Full Name, Email, etc.)\n    eventTitle: eventTitle,\n    seed: seed,\n    columnHints: columnHints\n  };\n});\n\n// Return the new array of enriched rows directly\nreturn enrichedRows;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        -128
      ],
      "id": "9ce91170-9948-4caa-8a6c-3ec302a20c10",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        688,
        -128
      ],
      "id": "50a430a1-54c9-4c01-af24-6757d9aa9bac",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "// The data comes from the Aggregate node\nvar rows = $json.data;\n\n// --- PART 1: Tally Logic ---\nvar tally = { venues: {}, dates: {} };\nfor (var i = 0; i < rows.length; i++) {\n    var row = rows[i];\n    var venue = row['Preferred location 📍'] || row['Preferred location'];\n    var date = row['Preferred time slot ⏰'] || row['Preferred time slot'];\n    if (venue) { tally.venues[venue] = (tally.venues[venue] || 0) + 1; }\n    if (date) { tally.dates[date] = (tally.dates[date] || 0) + 1; }\n}\nvar findWinner = function(tallyObject) {\n    var keys = Object.keys(tallyObject);\n    if (keys.length === 0) { return { winner: null, tieBroken: false }; }\n    var maxVotes = 0;\n    for (var key in tallyObject) { if (tallyObject[key] > maxVotes) { maxVotes = tallyObject[key]; } }\n    var winners = [];\n    for (var key in tallyObject) { if (tallyObject[key] === maxVotes) { winners.push(key); } }\n    var tieBroken = winners.length > 1;\n    var winner = winners[Math.floor(Math.random() * winners.length)];\n    return { winner: winner, tieBroken: tieBroken };\n};\nvar venueResult = findWinner(tally.venues);\nvar dateResult = findWinner(tally.dates);\nvar winningVenue = venueResult.winner;\nvar winningDate = dateResult.winner;\nvar reason = \"Determined by selecting the highest-voted option.\";\nif (venueResult.tieBroken || dateResult.tieBroken) {\n    reason = \"Determined by selecting the highest-voted option. A tie was broken randomly.\";\n}\nvar eventTitle = (rows[0] && rows[0].eventTitle) || \"Event RSVP\";\n\n// --- PART 2: Formatting Logic ---\nvar dateLines = Object.keys(tally.dates).map(function(d) { return '• ' + d + ': ' + tally.dates[d] + ' votes'; }).join('\\n');\nvar venueLines = Object.keys(tally.venues).map(function(v) { return '• ' + v + ': ' + tally.venues[v] + ' votes'; }).join('\\n');\nvar formattedMessage = \"📊 Here are the results for **\" + eventTitle + \"**:\\n\\n\" +\n              \"**Date Tallies:**\\n\" +\n              (dateLines || 'No votes for dates.') + \"\\n\\n\" +\n              \"**Venue Tallies:**\\n\" +\n              (venueLines || 'No votes for venues.') + \"\\n\\n\" +\n              \"---\\n\\n\" +\n              \"🏆 **Recommendation:**\\n\" +\n              \"The winning option is **\" + winningDate + \"** at **\" + winningVenue + \"**.\\n\\n\" +\n              \"*Reason: \" + reason + \"*\\n\\n\" +\n              \"Shall I go ahead and send the calendar invitations?\";\n\n// --- PART 3: Return an object containing the formatted message ---\n// --- PART 3: Return an object with all the necessary data ---\nreturn {\n  eventTitle: eventTitle,\n  winners: {\n    venue: winningVenue,\n    date: winningDate\n  },\n  reason: reason,\n  // We can also include the formatted message for the chat reply later\n  message: formattedMessage\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        848,
        -128
      ],
      "id": "d7fecb2a-d6c3-4861-912a-085e53cbd392",
      "name": "Tally"
    },
    {
      "parameters": {
        "toRecipients": "={{ $('Get row(s) in sheet').all().filter(item => item.json['Can you attend?'] === 'Yes').map(item => item.json.Email).join(',') }}",
        "subject": "=Event Finalized: {{ $('Tally').item.json.eventTitle }}",
        "bodyContent": "=Hi everyone,\n\nGreat news! The details for our upcoming {{ $('Tally').item.json.eventTitle }} have been finalized based on everyone's feedback.\n\nHere are the final details:\n\nLink to the Event : {{ $json.webLink }}\nDate: {{ $('Tally').item.json.winners.venue }} Location: {{ $('Tally').item.json.winners.venue }}\n\nLooking forward to seeing you there!",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        1840,
        -256
      ],
      "id": "b4d43043-7afb-4c86-8f07-14bc348f7a14",
      "name": "Send a message1",
      "webhookId": "00732d72-5163-46e9-a6c4-29be1782b558",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "e6Nvw1Cy3xGBIZ1g",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "content": "Before saying yes, go to HTTP request output, and add some fake data to test. And then type yes into the chat!"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -112,
        -208
      ],
      "id": "9bf3ae67-bb4d-4c56-b9d6-dec460da1301",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Try to safely get the date string\nvar dateStr = ($('Tally').first().json.winners && $('Tally').first().json.winners.date) || \"\";\nif (!dateStr) {\n  throw new Error(\"No date found in tallyData.winners.date\");\n}\n\n// Clean up date string for JS parser\ndateStr = dateStr.replace(/(\\d+)(st|nd|rd|th)/, \"$1\"); // remove 6th -> 6\n\nvar fullDateStr = dateStr + \", 2025\"; // add year\n\n// Attempt to parse\nvar startDate = new Date(fullDateStr);\n\n// If parsing failed, provide a fallback\nif (isNaN(startDate.getTime())) {\n  console.log(\"⚠️ Could not parse dateStr, using default fallback.\");\n  startDate = new Date(); // fallback to current time\n  startDate.setHours(19, 0, 0, 0); // 7pm today\n}\n\n// Add 2 hours for event end\nvar endDate = new Date(startDate.getTime());\nendDate.setHours(endDate.getHours() + 2);\n\n// Return result\nreturn {\n  start: startDate.toISOString(),\n  end: endDate.toISOString()\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        -256
      ],
      "id": "dbbd7c66-a3b8-42ae-a1af-729e8b1d72e3",
      "name": "Code in JavaScript1"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Chat": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Chat1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Chat1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Chat2": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Chat3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Chat3": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Tally",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tally": {
      "main": [
        [
          {
            "node": "Respond to Chat2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create an event": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Create an event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4e6bb2e8-10ea-4e75-8329-6aed92863ce2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "0b0706e7cf3f8f09e46f6014362890fa57fb67ed7077cf588f8638626caa111c"
  },
  "id": "CgpIcmhz8iPhuyfR",
  "tags": []
}
