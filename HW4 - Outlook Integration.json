{
  "name": "Hw2",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "You are an event-planning assistant that helps generate Google Forms for collecting RSVPs.\n\nThe user will provide a short natural-language event description (for example, ‚ÄúNetworking mixer for 12‚Äì18 MSBA students in Westwood this Friday‚Äù).\nYour task is to convert this input into a structured RSVP form definition.\n\nAlways output a single, valid JSON object ‚Äî no extra words, explanations, or formatting outside the JSON.\n\nOutput structure:\n{\n  \"title\": \"string\",\n  \"description\": \"string\",\n  \"questions\": [\n    {\n      \"type\": \"shortAnswer\" | \"multipleChoice\" | \"checkbox\" | \"paragraph\" | \"date\" | \"time\",\n      \"title\": \"string\",\n      \"helpText\": \"string (optional)\",\n      \"options\": [\"option1\", \"option2\", ...]  // only for multipleChoice or checkbox\n    }\n  ]\n}\n\nGuidelines:\n- Use the user's event description to infer title, description, and relevant options.\n- Always include these 5‚Äì7 RSVP questions:\n  1) shortAnswer ‚Äî \"Full Name\"\n  2) shortAnswer ‚Äî \"Email\"\n  3) multipleChoice ‚Äî \"Can you attend?\" with [\"Yes\",\"No\"]\n  4) shortAnswer ‚Äî \"Preferred location\"\n  5) multipleChoice ‚Äî \"Preferred time slot\" (derive 2‚Äì4 from description)\n  6) checkbox ‚Äî \"Activity preference\" (infer or use [\"Networking\",\"Games\",\"Food\",\"Drinks\"])\n  7) paragraph ‚Äî \"Dietary notes or comments\" (optional)\n- Keep tone friendly and professional.\n- Never include explanations like ‚ÄúHere‚Äôs your form‚Äù; output pure JSON.\n\nExample input:\n\"Networking mixer for 12‚Äì18 MSBA students in Westwood this Friday.\"\n\nExample output:\n{\n  \"title\": \"RSVP ‚Äî MSBA Westwood Mixer\",\n  \"description\": \"RSVP for a networking mixer for MSBA students in Westwood this Friday.\",\n  \"questions\": [\n    {\"type\":\"shortAnswer\", \"title\":\"Full Name\"},\n    {\"type\":\"shortAnswer\", \"title\":\"Email\"},\n    {\"type\":\"multipleChoice\", \"title\":\"Can you attend?\", \"options\":[\"Yes\",\"No\"]},\n    {\"type\":\"shortAnswer\", \"title\":\"Preferred location\"},\n    {\"type\":\"multipleChoice\", \"title\":\"Preferred time slot\", \"options\":[\"Friday 6‚Äì8 PM\",\"Saturday 5‚Äì7 PM\",\"Sunday 3‚Äì5 PM\"]},\n    {\"type\":\"checkbox\", \"title\":\"Activity preference\", \"options\":[\"Networking\",\"Games\",\"Food\",\"Drinks\"]},\n    {\"type\":\"paragraph\", \"title\":\"Dietary notes or comments\"}\n  ]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1280,
        288
      ],
      "id": "6c6b39b3-d724-47a4-b712-48ada0d49c64",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1440,
        512
      ],
      "id": "feeae055-5432-4c8a-b76b-9be2cb130811",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d07234fb-2723-4a87-bb36-5503e89213b6",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        848,
        288
      ],
      "id": "199b912b-58b7-415d-93e7-ed96c3a606d6",
      "name": "Webhook",
      "webhookId": "d07234fb-2723-4a87-bb36-5503e89213b6"
    },
    {
      "parameters": {
        "options": {
          "responseKey": "==`I have successfully created the RSVP form and sent it to the recipients at ${new Date().toLocaleString('en-US', { timeZone: 'America/Los_Angeles' })}.`"
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2224,
        288
      ],
      "id": "1b63abf5-ef26-462a-b860-94c782a6f763",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "content": "üåê WEBHOOK (POST)\nReads JSON under body.*\n\nExpected keys:\n- query (string, required)\n- username (string, recommended) ‚Üí session key\n\nExample body:\n{\n  \"query\": \"Two fun facts about Sydney\",\n  \"username\": \"demo-user-1\"\n}\n",
        "height": 200,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        784,
        64
      ],
      "typeVersion": 1,
      "id": "67a44f4c-7241-4974-a2b0-de63a88ad4f6",
      "name": "Overview Explanation1"
    },
    {
      "parameters": {
        "content": "@Freya - could you update AppScript so that it returns the google sheet url? :)(responses)",
        "height": 112,
        "width": 160
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1808,
        144
      ],
      "typeVersion": 1,
      "id": "a63f991d-839b-427f-9473-c5ad4813c6d9",
      "name": "Overview Explanation2"
    },
    {
      "parameters": {
        "content": "üß† AI AGENT (rules)\n- Short replies (2‚Äì3 sentences)\n- Plain language\n- If vague ‚Üí general answer + suggest adding detail\n- If specific ‚Üí tailor the answer\n",
        "height": 184,
        "width": 304,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1136,
        80
      ],
      "typeVersion": 1,
      "id": "81d8113b-abd3-4583-bf54-a97d1a76c97f",
      "name": "Overview Explanation3"
    },
    {
      "parameters": {
        "content": "üóÇÔ∏è MEMORY (window)\nsessionKey = body.username\n- Same username ‚Üí shared context across calls\n- Different username ‚Üí fresh session\n",
        "height": 136,
        "width": 288,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1280,
        656
      ],
      "typeVersion": 1,
      "id": "3a84a4ce-b9e1-4437-9155-0172c6ebab93",
      "name": "Overview Explanation4"
    },
    {
      "parameters": {
        "content": "ü§ñ OPENAI CHAT MODEL\nModel: gpt-4o-mini\n- Fast & cost-effective\n- Temperature ~0.2 for consistency\n",
        "height": 104,
        "width": 288,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        768,
        480
      ],
      "typeVersion": 1,
      "id": "2e0efd40-dfb2-443b-a3e7-d6dafa596647",
      "name": "Overview Explanation5"
    },
    {
      "parameters": {
        "content": "# Basic Webhook ‚Üí OpenAI (with Memory)\n\nüîå **Entry Point**\n- Client sends **POST JSON** to the n8n **Webhook**\n- Reads `body.query` (required) and `body.username` (recommended)\n- Workflow must be **Active** ‚Üí use the **Production URL**\n\nüß† **AI Agent**\n- Short, plain-English replies (2‚Äì3 sentences)\n- If vague ‚Üí general answer + suggest adding detail\n- If specific ‚Üí tailor the answer\n\nü§ñ **OpenAI Model**\n- Model: `gpt-4o-mini` (fast, cost-effective)\n- Tip: temperature ‚âà **0.2** for consistency\n\nüóÇÔ∏è **Memory**\n- `sessionKey = body.username`\n- Same username ‚Üí shared context across calls\n- Different username ‚Üí fresh session\n\n‚Ü©Ô∏è **Response**\n- Returns the AI reply to the caller (plain text or small JSON)\n\nüß™ **Test Quickly**\n- cURL / Postman / Colab (make a copy ‚Üí paste **Production** Webhook URL into `url`/`WEBHOOK_URL`)\n\nüîê **Notes**\n- Don‚Äôt send secrets in `query`\n- Ensure `Content-Type: application/json`\n- Rate limiting / auth can be added in later levels\n",
        "height": 736,
        "width": 1216,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        128,
        -272
      ],
      "typeVersion": 1,
      "id": "dc8fee78-6275-4e4e-9291-38f129c06fda",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "model": "openai/o4-mini-high",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1280,
        480
      ],
      "id": "707df782-a94b-4c9d-9af0-486b78b34098",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "jPN6HIDuzt2yQ4fW",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        1056,
        288
      ],
      "id": "8409dc99-c1e6-4030-b2bc-ca42da88a8ef",
      "name": "When chat message received",
      "webhookId": "e0970f16-2ab0-4830-afd1-280d3e88058f"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://script.google.com/macros/s/AKfycbyiLwbMor5TpuGjBCMvEYQVUPcB7QJW1FnKJGXn3OO0PdO8jgakwYMjCDGt1UficpS9/exec",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1840,
        288
      ],
      "id": "c3f96a89-f733-4337-8a6a-f083611a5010",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Collect likely fields where the model might put the JSON\nconst candidates = [\n  $json.schema,\n  $json.output,               // <-- your case\n  $json.kwargs?.content,\n  $json.content,\n  $json.text,\n  $json.message,\n  $json.response,\n];\n\n// Pick the first non-null/undefined candidate\nlet raw = candidates.find(v => v !== undefined && v !== null) ?? '';\n\nfunction safeParse(input) {\n  if (input && typeof input === 'object') return input; // already an object\n  const s = String(input);\n  // If the model wrapped the JSON with any extra text, extract the first {...} block\n  const start = s.indexOf('{');\n  const end   = s.lastIndexOf('}');\n  const core  = (start >= 0 && end >= start) ? s.slice(start, end + 1) : s;\n\n  try {\n    return JSON.parse(core);\n  } catch {\n    // Fallback schema (so Apps Script still creates a form)\n    return {\n      title: \"Untitled Event\",\n      description: \"Auto-generated placeholder (invalid JSON).\",\n      questions: [\n        { type: \"shortAnswer\",    title: \"Full Name\" },\n        { type: \"multipleChoice\", title: \"Can you attend?\", options: [\"Yes\",\"No\"] },\n        { type: \"paragraph\",      title: \"Dietary restrictions or comments\" }\n      ]\n    };\n  }\n}\n\n// n8n expects an array of items\nreturn [{ json: safeParse(raw) }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1632,
        288
      ],
      "id": "56b0c1f2-3f92-48c6-9f10-d54a1c16b7f8",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "toRecipients": "emyoh001@g.ucla.edu\n",
        "subject": "=Event RSVP: {{$json.eventTitle || 'Our Event'}}",
        "bodyContent": "={{`<p>Hi team,</p>\n<p>Please RSVP for <b>${$json.eventTitle || 'Our Event'}</b> using this link:</p>\n<p><a href=\"${$node['HTTP Request'].json.responderUrl}\">RSVP Form</a></p>\n<p>Thanks!</p>`}}\n",
        "additionalFields": {
          "bodyContentType": "html"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        2032,
        288
      ],
      "id": "45c423fc-5399-4df1-b8fa-cf76d7976194",
      "name": "Send a message",
      "webhookId": "a954e567-f734-42c6-be49-0d2222d96edc",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "e6Nvw1Cy3xGBIZ1g",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "11CSkqav63CwpMlNp92KuQwcTKU-Fh6cIW587hv8mUBE",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/11CSkqav63CwpMlNp92KuQwcTKU-Fh6cIW587hv8mUBE/edit?resourcekey=&gid=1869144390#gid=1869144390",
          "mode": "url"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        2400,
        288
      ],
      "id": "e0192720-1c7a-4859-8b60-2ee3e88eb10b",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "49IV4IPDumI81TWG",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2576,
        288
      ],
      "id": "e9ef13b9-bebb-421a-8989-0ceef5ca541f",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "// ----- CONFIG: update these to match your sheet headers -----\nconst VENUE_COL = 'Venue';      // e.g., 'Venue', 'Which venue?'\nconst DATE_COL  = 'Date';       // e.g., 'Date', 'Which day?'\n// If your sheet uses \"Day\" or \"Time slot\", update DATE_COL accordingly.\n// ------------------------------------------------------------\n\nfunction normalize(val) {\n  if (val == null) return '';\n  return String(val).trim();\n}\n\n// If your Google Form allows multi-select for a question, split on commas.\nfunction splitMulti(val) {\n  return normalize(val)\n    .split(',')\n    .map(s => s.trim())\n    .filter(Boolean);\n}\n\nfunction countBy(rows, col) {\n  const counts = {};\n  for (const r of rows) {\n    const raw = r[col];\n    if (!raw) continue;\n    // Support single-value or multi-select answers\n    const values = splitMulti(raw);\n    if (values.length === 0) continue;\n    for (const v of values) counts[v] = (counts[v] || 0) + 1;\n  }\n  return counts;\n}\n\nfunction pickWinner(counts) {\n  const entries = Object.entries(counts);\n  if (entries.length === 0) return { winner: null, topCandidates: [], max: 0 };\n\n  const max = Math.max(...entries.map(([, n]) => n));\n  const topCandidates = entries.filter(([, n]) => n === max).map(([k]) => k);\n  const winner = topCandidates[Math.floor(Math.random() * topCandidates.length)];\n  return { winner, topCandidates, max };\n}\n\n// Read all rows from the Google Sheets node\nconst rows = $input.all().map(i => i.json);\n\n// Build tallies\nconst venueCounts = countBy(rows, VENUE_COL);\nconst dateCounts  = countBy(rows, DATE_COL);\n\n// Choose winners (random among ties)\nconst vPick = pickWinner(venueCounts);\nconst dPick = pickWinner(dateCounts);\n\n// Shape output for downstream LLM and/or email/calendar steps\nreturn [\n  {\n    json: {\n      stats: {\n        totalResponses: rows.length,\n        venueCounts,\n        dateCounts,\n      },\n      decision: {\n        finalVenue: vPick.winner,\n        finalDate: dPick.winner,\n        tieInfo: {\n          venueTopCandidates: vPick.topCandidates,\n          dateTopCandidates: dPick.topCandidates,\n        }\n      }\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2736,
        288
      ],
      "id": "7f937c52-fa06-4a5d-86b0-cdab2d452b98",
      "name": "Tally Votes"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        2912,
        496
      ],
      "id": "16171219-e900-401f-844a-4ee4e530c65a",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "jPN6HIDuzt2yQ4fW",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2912,
        288
      ],
      "id": "59f52381-5012-4006-8f4b-6f14a2488c10",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "subject": "=Event Decision: {{$json.decision.finalVenue || 'TBD'}} on {{$json.decision.finalDate || 'TBD'}}",
        "bodyContent": "`<p>Here‚Äôs the summary:</p>\n<pre>${JSON.stringify($json.stats, null, 2)}</pre>\n<p><b>Final pick:</b> ${$json.decision.finalVenue || 'TBD'} on ${$json.decision.finalDate || 'TBD'}</p>`\n",
        "additionalFields": {
          "bodyContentType": "html"
        }
      },
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        3184,
        288
      ],
      "id": "44b7b648-d376-45ac-b16d-9e830b92243c",
      "name": "Send a message1",
      "webhookId": "3c55b9b1-fe65-4fd7-9fee-704aa09bb738",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "e6Nvw1Cy3xGBIZ1g",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "content": "-Currently I used my email (Em's) as a credential to connect with outlook. \n-We should update the email input (from RAG)",
        "width": 160
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2000,
        96
      ],
      "typeVersion": 1,
      "id": "f6ad460d-b500-484f-94f0-6595939b26aa",
      "name": "Overview Explanation"
    },
    {
      "parameters": {
        "content": "-Currently I used my email (Em's) as a credential to connect with google sheet.\n-We should update the url input (from freya's appscript)",
        "height": 176,
        "width": 160
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2368,
        80
      ],
      "typeVersion": 1,
      "id": "0935e5b4-f10d-415e-ba30-fd20abc2726c",
      "name": "Overview Explanation6"
    },
    {
      "parameters": {
        "content": "-Currently no system prompt!",
        "height": 80,
        "width": 160
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2944,
        192
      ],
      "typeVersion": 1,
      "id": "effa0ccc-97c4-4d7a-be74-907a6c0d0bea",
      "name": "Overview Explanation7"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Tally Votes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tally Votes": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "52ced2dc-d8af-4f0d-b4b3-edb9a32c6554",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "0b0706e7cf3f8f09e46f6014362890fa57fb67ed7077cf588f8638626caa111c"
  },
  "id": "CgpIcmhz8iPhuyfR",
  "tags": []
}