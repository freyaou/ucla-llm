{
  "name": "Hw2",
  "nodes": [
    {
      "parameters": {
        "options": {
          "systemMessage": "You are an event-planning assistant that helps generate Google Forms for collecting RSVPs.\n\nThe user will provide a short natural-language event description (for example, ‚ÄúNetworking mixer for 12‚Äì18 MSBA students in Westwood this Friday‚Äù).\nYour task is to convert this input into a structured RSVP form definition.\n\nAlways output a single, valid JSON object ‚Äî no extra words, explanations, or formatting outside the JSON.\n\nOutput structure:\n{\n  \"title\": \"string\",\n  \"description\": \"string\",\n  \"questions\": [\n    {\n      \"type\": \"shortAnswer\" | \"multipleChoice\" | \"checkbox\" | \"paragraph\" | \"date\" | \"time\",\n      \"title\": \"string\",\n      \"helpText\": \"string (optional)\",\n      \"options\": [\"option1\", \"option2\", ...]  // only for multipleChoice or checkbox\n    }\n  ]\n}\n\nGuidelines:\n- Use the user's event description to infer title, description, and relevant options.\n- Always include these 5‚Äì7 RSVP questions:\n  1) shortAnswer ‚Äî \"Full Name\"\n  2) shortAnswer ‚Äî \"Email\"\n  3) multipleChoice ‚Äî \"Can you attend?\" with [\"Yes\",\"No\"]\n  4) shortAnswer ‚Äî \"Preferred location\"\n  5) multipleChoice ‚Äî \"Preferred time slot\" (derive 2‚Äì4 from description)\n  6) checkbox ‚Äî \"Activity preference\" (infer or use [\"Networking\",\"Games\",\"Food\",\"Drinks\"])\n  7) paragraph ‚Äî \"Dietary notes or comments\" (optional)\n- Keep tone friendly and professional.\n- Never include explanations like ‚ÄúHere‚Äôs your form‚Äù; output pure JSON.\n\nExample input:\n\"Networking mixer for 12‚Äì18 MSBA students in Westwood this Friday.\"\n\nExample output:\n{\n  \"title\": \"RSVP ‚Äî MSBA Westwood Mixer\",\n  \"description\": \"RSVP for a networking mixer for MSBA students in Westwood this Friday.\",\n  \"questions\": [\n    {\"type\":\"shortAnswer\", \"title\":\"Full Name\"},\n    {\"type\":\"shortAnswer\", \"title\":\"Email\"},\n    {\"type\":\"multipleChoice\", \"title\":\"Can you attend?\", \"options\":[\"Yes\",\"No\"]},\n    {\"type\":\"shortAnswer\", \"title\":\"Preferred location\"},\n    {\"type\":\"multipleChoice\", \"title\":\"Preferred time slot\", \"options\":[\"Friday 6‚Äì8 PM\",\"Saturday 5‚Äì7 PM\",\"Sunday 3‚Äì5 PM\"]},\n    {\"type\":\"checkbox\", \"title\":\"Activity preference\", \"options\":[\"Networking\",\"Games\",\"Food\",\"Drinks\"]},\n    {\"type\":\"paragraph\", \"title\":\"Dietary notes or comments\"}\n  ]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1152,
        560
      ],
      "id": "8fa81cc3-0bff-470b-a91c-8a5db2205c46",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1312,
        784
      ],
      "id": "cda37803-0f91-4a50-9b75-339858db4762",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d07234fb-2723-4a87-bb36-5503e89213b6",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        720,
        560
      ],
      "id": "d5b37743-0e6b-425a-9896-29391a726559",
      "name": "Webhook",
      "webhookId": "d07234fb-2723-4a87-bb36-5503e89213b6"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1920,
        560
      ],
      "id": "2975ceb9-ff42-4085-9c14-337a8773b259",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "content": "üåê WEBHOOK (POST)\nReads JSON under body.*\n\nExpected keys:\n- query (string, required)\n- username (string, recommended) ‚Üí session key\n\nExample body:\n{\n  \"query\": \"Two fun facts about Sydney\",\n  \"username\": \"demo-user-1\"\n}\n",
        "height": 200,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        656,
        336
      ],
      "typeVersion": 1,
      "id": "fa9db8b8-07b0-47c6-a91e-98035dbb8cc1",
      "name": "Overview Explanation1"
    },
    {
      "parameters": {
        "content": "‚Ü©Ô∏è RESPOND TO WEBHOOK\nReturns AI reply to the caller\n- Plain text or small JSON (config)\n- Keep it simple for this level\n",
        "height": 120,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1424,
        432
      ],
      "typeVersion": 1,
      "id": "0db17d3e-f9ce-467a-b60d-a608a68dd89b",
      "name": "Overview Explanation2"
    },
    {
      "parameters": {
        "content": "üß† AI AGENT (rules)\n- Short replies (2‚Äì3 sentences)\n- Plain language\n- If vague ‚Üí general answer + suggest adding detail\n- If specific ‚Üí tailor the answer\n",
        "height": 184,
        "width": 304,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1008,
        352
      ],
      "typeVersion": 1,
      "id": "0a753b7c-80fb-4961-aaee-6d5cefaff926",
      "name": "Overview Explanation3"
    },
    {
      "parameters": {
        "content": "üóÇÔ∏è MEMORY (window)\nsessionKey = body.username\n- Same username ‚Üí shared context across calls\n- Different username ‚Üí fresh session\n",
        "height": 136,
        "width": 288,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1232,
        768
      ],
      "typeVersion": 1,
      "id": "8783461f-3807-4a0a-857c-3cb281755f11",
      "name": "Overview Explanation4"
    },
    {
      "parameters": {
        "content": "ü§ñ OPENAI CHAT MODEL\nModel: gpt-4o-mini\n- Fast & cost-effective\n- Temperature ~0.2 for consistency\n",
        "height": 104,
        "width": 288,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        640,
        752
      ],
      "typeVersion": 1,
      "id": "68960708-7aed-45b5-b4a9-69a095a51105",
      "name": "Overview Explanation5"
    },
    {
      "parameters": {
        "content": "# Basic Webhook ‚Üí OpenAI (with Memory)\n\nüîå **Entry Point**\n- Client sends **POST JSON** to the n8n **Webhook**\n- Reads `body.query` (required) and `body.username` (recommended)\n- Workflow must be **Active** ‚Üí use the **Production URL**\n\nüß† **AI Agent**\n- Short, plain-English replies (2‚Äì3 sentences)\n- If vague ‚Üí general answer + suggest adding detail\n- If specific ‚Üí tailor the answer\n\nü§ñ **OpenAI Model**\n- Model: `gpt-4o-mini` (fast, cost-effective)\n- Tip: temperature ‚âà **0.2** for consistency\n\nüóÇÔ∏è **Memory**\n- `sessionKey = body.username`\n- Same username ‚Üí shared context across calls\n- Different username ‚Üí fresh session\n\n‚Ü©Ô∏è **Response**\n- Returns the AI reply to the caller (plain text or small JSON)\n\nüß™ **Test Quickly**\n- cURL / Postman / Colab (make a copy ‚Üí paste **Production** Webhook URL into `url`/`WEBHOOK_URL`)\n\nüîê **Notes**\n- Don‚Äôt send secrets in `query`\n- Ensure `Content-Type: application/json`\n- Rate limiting / auth can be added in later levels\n",
        "height": 736,
        "width": 1216,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "d8a6c533-b4ec-482e-92d1-9efb73ae6be2",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "model": "deepseek/deepseek-chat-v3.1:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1152,
        752
      ],
      "id": "d07507d5-8ff5-4b1a-b6e5-4dc63aedc499",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "i1Qz3RjwhoO5Ybcv",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        928,
        560
      ],
      "id": "5911fd2f-fc75-4ec7-8bbc-01086f7c0c95",
      "name": "When chat message received",
      "webhookId": "e0970f16-2ab0-4830-afd1-280d3e88058f"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://script.google.com/macros/s/AKfycbyiLwbMor5TpuGjBCMvEYQVUPcB7QJW1FnKJGXn3OO0PdO8jgakwYMjCDGt1UficpS9/exec",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1712,
        560
      ],
      "id": "e42a81fe-b21d-4f8a-ace5-0e8273853731",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Collect likely fields where the model might put the JSON\nconst candidates = [\n  $json.schema,\n  $json.output,               // <-- your case\n  $json.kwargs?.content,\n  $json.content,\n  $json.text,\n  $json.message,\n  $json.response,\n];\n\n// Pick the first non-null/undefined candidate\nlet raw = candidates.find(v => v !== undefined && v !== null) ?? '';\n\nfunction safeParse(input) {\n  if (input && typeof input === 'object') return input; // already an object\n  const s = String(input);\n  // If the model wrapped the JSON with any extra text, extract the first {...} block\n  const start = s.indexOf('{');\n  const end   = s.lastIndexOf('}');\n  const core  = (start >= 0 && end >= start) ? s.slice(start, end + 1) : s;\n\n  try {\n    return JSON.parse(core);\n  } catch {\n    // Fallback schema (so Apps Script still creates a form)\n    return {\n      title: \"Untitled Event\",\n      description: \"Auto-generated placeholder (invalid JSON).\",\n      questions: [\n        { type: \"shortAnswer\",    title: \"Full Name\" },\n        { type: \"multipleChoice\", title: \"Can you attend?\", options: [\"Yes\",\"No\"] },\n        { type: \"paragraph\",      title: \"Dietary restrictions or comments\" }\n      ]\n    };\n  }\n}\n\n// n8n expects an array of items\nreturn [{ json: safeParse(raw) }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        560
      ],
      "id": "7ab6efd3-9278-48fb-8bea-e6b523549f81",
      "name": "Code in JavaScript"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        []
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "680f7b3b-3cbd-4e66-bafe-30cd2d5fe166",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f3e3cb2ed6699de703589f877ea7a84038c28e08520077bd8c2138735aacedb3"
  },
  "id": "LP4BiDkZQnmiNDHk",
  "tags": []
}
